import { Expr, Stmt } from './base.ts';
import type Token from '../token.ts';
/**
 * this file is auto generated and should not be altered by hand.
 */

export interface AstVisitor<T> {
<% it.classes.forEach(function(classMeta) { %>
  visit<%=classMeta.name%>(node: <%=classMeta.name%>): T;
<%})%>
}

<% it.classes.forEach(function(classMeta) { %>
export class <%=classMeta.name%> extends <%=classMeta.extends%> {
<% Object.keys(classMeta.properties).forEach(prop => {%>
  <%=prop%>: <%=classMeta.properties[prop]%>;
<%})%>
<% let args =  ""%>
<% Object.keys(classMeta.properties).forEach(prop => {%>
  <% args += `${prop}: ${classMeta.properties[prop]}, ` %>
<%})%>
<% args = args.slice(0, -2) %>

  constructor(<%=args%>) {
    super();
<% Object.keys(classMeta.properties).forEach(prop => {%>
<% if (prop.endsWith('?')) { %>
    this.<%=prop.slice(0, prop.length - 1)%> = <%=prop.slice(0, prop.length - 1)%>;
<%} else {%>
    this.<%=prop%> = <%=prop%>;
<%}%>
<%})%>
  }

  accept<T>(visitor: AstVisitor<T>): T {
    return visitor.visit<%=classMeta.name%>(this);
  }
}

<%})%>
